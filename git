git format-patch -x   生成最后x个提交对应的patch文件。
diff -Nrua   a  b > c.patch
git commit -m "xx"

git config --global user.name "Your Name" 
git config --global user.email you@yourdomain.example.com 

git format-path -50
git rm –r * （进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录） 
git rm f1    (删除文件f1，包含本地目录和index中的此文件记录) 
git rm --cached f1 (删除文件f1，不会删除本地目录文件，只删除index中的文件记录；将已经git add的文件remove到cache中,这样commit的时候不会提交这个文件, 适用于一下子添加了很多文件, 却又想排除其中个别几个文件的情况.) 



git log --pretty=oneline kernel/sys.c

git checkout –b 新分支名                 #切换本地分支
git checkout 分支名                        #切换服务器上的分支（远程分支可以通过 git branch -r 列出） 
git checkout commit_id                 #切换到commit id （使用cat .git/HEAD后，显示commit_id） 
git checkout tag                          #（使用cat .git/HEAD后，显示tag） 
git mv xx xxx                #重命名一个文件、目录或者链接。
git branch                   # 列出本地git库中的所有分支。在列出的分支中，若分支名前有*，则表示此分支为当前分支。
git branch –r               #列出服务器git库的所有分支。 
git branch 分支名            #创建一个分支 
git branch –D 分支名        #删除分支
git diff 分支名 分支名       #比较主分支和另一个分支的区别
git-show-branch             #查看当前分支的提交注释及信息） 
git-show-branch -all        #查看所有分支的提交注释及信息）
git whatchanged             #查看当前分支的操作记录 
git config --global color.ui true   #高亮
git remote add origin URL     #push地址


回滚commit到xx
git revert commit_id
git push origin branch_name --force  # --force 更新远程仓库

如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：

$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。


git checkout master &&  git merge cm10      #合并分支 cm10 分支 to master
git checkout master   （切换到master分支） git merge HEAD ics (合并master分支和ics分支)或者：git merge master ics            #合并分支 

git push origin :cm11.0   删除分支

git branch aokp-jb && git checkout aokp-jb && git merge cm10


git pull 合并的目标分支 合并的来源分支 
例如: git checkout master （切换到master分支） 
      git pull . ics（合并当前分支和ics分支） 
git rebase                  #将服务器上的最新版本合并到本地
git clone URL               #取出服务器的仓库的代码到本地建立的目录中

git pull 
git push
git fetch                   #从服务器的仓库中下载代码

git revert HEAD                  撤销前一次 commit
git revert HEAD^               撤销前前一次 commit
git revert commit-id
git revert de9c202dffe536de81dc690bd40db4f610b1438e



git cherry-pick 开始commit^..终止commit
如果开始commit右面不加箭头就是左开右闭



git cherry-pick <commit id>
$ git checkout old_cc
$ git cherry-pick 38361a68     # 这个 38361a68 号码，位于：
 
$ git log 
commit 38361a68138140827b31b72f8bbfd88b3705d77a 
Author: Siwei Shen <siwei.shen@focusbeijing.com>
Date:   Sat Dec 10 00:09:44 2011 +0800

1. 如果顺利，就会正常提交。结果：
Finished one cherry-pick.
# On branch old_cc
# Your branch is ahead of 'origin/old_cc' by 3 commits.

2. 如果在cherry-pick 的过程中出现了冲突
Automatic cherry-pick failed.  After resolving the conflicts,
mark the corrected paths with 'git add <paths>' or 'git rm <paths>'
and commit the result with: 

        git commit -c 15a2b6c61927e5aed6718de89ad9dafba939a90b

就跟普通的冲突一样，手工解决：
2.1 $ git status    # 看哪些文件出现冲突
both modified:      app/models/user.rb 

2.2 $ vim app/models/user.rb  # 手动解决它。 
2.3 $ git add app/models/user.rb
2.4 git commit -c <新的commit号码>


# linux 3.4
76e10d158efb6d4516018846f60c2ab5501900bc


# android 3.10   3.4 commit
76e10d158efb6d4516018846f60c2ab5501900bc

# 合并b
git rebase android-3.4

# 处理完冲突继续合并
git rebase --continue

# 跳过
git rebase --skip

# 取消合并
git rebase --abort


git merge-base origin/test2 origin/android-3.4


e3f681ae691bd64d1dc06bab9ad4c98ad4effa82 a2425ffd6902717115f079c618b0f07126724e7c



git cherry-pick commit_id^..commit_id


git cherry-pick --continue
git cherry-pick --quit

git cherry-pick --allow-empty ^..




git cherry-pick a72f0d4f070d9ca35690a636d69fede3688d2bec
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick aafdf5083df50853ad46fb556f0c4f7fb89b7c30
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 
git cherry-pick 9f032c5e257f1d3f729f70dd244310dc135d8196
git cherry-pick bdf7d502c35ac220a707d175b0ef2509dc88ef74
git cherry-pick 9f032c5e257f1d3f729f70dd244310dc135d8196
git cherry-pick 2631f1c87a6aec44da61c00f8b77475630ce921d^..32b7a6bda40a81db06cde57abc31c5c8cc4e0d2f

git cherry-pick --continue
git cherry-pick --quit


# Linux 3.4
76e10d158efb6d4516018846f60c2ab5501900bc





git log --pretty=oneline arch/arm/configs/cm_u8500_defconfig
git log --pretty=oneline arch/arm/common/fiq_debugger.c







重置到Linux 3.4.39
be77d2a32f17b946fec4bfe28c79de91252c080c




git merge --no-ff

https://www.kernel.org/pub/linux/kernel/v3.x/stable-review/

https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git
http://malideveloper.arm.com/cn/develop-for-mali/drivers/open-source-mali-gpus-linux-kernel-device-drivers/
